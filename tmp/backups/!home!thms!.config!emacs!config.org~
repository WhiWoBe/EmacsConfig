#+TITLE: Thomas GNU Emacs Config
#+AUTHOR: Thomas Michaelsen (TMI)
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+DESCRIPTION: Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* INFO  

The code blocks of this file get tangled into the file
under the Header argument PROPERTY. To show the changes in the init file
you need to run revert-buffer or enable ~auto-revert-mode~ for that buffer.

* General Settings

#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

      ;; WINDOW
      (scroll-bar-mode -1) ;show scroll bars
      (set-fringe-mode 0) ;added window border
      (menu-bar-mode -1) ; top menu bar
      (tool-bar-mode -1)
      ;; (tooltip mode -1)

      (setq visible-bell t)

      ;; Scroll
      ;; (pixel-scroll-precision-mode)

      ;; Line Numbers
      (global-display-line-numbers-mode 1)
      (menu-bar--display-line-numbers-mode-relative)
      ;; (display-line-numbers-type 'relative)

      ;; History

  (setq history-length 25)
  (savehist-mode 1)


  (setq recentf-max-saved-items 25)
  (recentf-mode 1)

    ;; Auto update buffers
    (global-auto-revert-mode)

#+end_src

* Appearance Settings (Fonts and Themes)

#+begin_src emacs-lisp 

  ;; Font Settings
  (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 180)

  ;; Theme Settings
  (setq modus-themes-region'(bg-only))
  (setq modus-themes-mode-line '(accented borderless padded))
  (setq modus-themes-org-blocks 'gray-background)
  (load-theme 'modus-vivendi t)

#+end_src

* Package Manager

Package.el is built into Emacs
#+begin_src emacs-lisp

  ;; TANGLE
  (require 'package)

  ;; Package Sources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Packages
Since Emacs 20.1 use package is pre installed

** Minibuffer
:PROPERTIES:
:ID:       090c3df3-9d7e-4098-897d-6ca14dd3eb13
:END:
ivy rich has a bug which breaks the buffer when starting dred
or use Distrotubes guide for Ivy https://www.youtube.com/watch?v=A4UothfExBM&list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX&index=5
check out Alternatives https://github.com/emacs-tw/awesome-emacs?tab=readme-ov-file#other-awesome-lists:~:text=for%20key%2Dbindings.-,Minibuffer,-IDO%20%2D%20%5Bbuilt  
For now i will use build in (fido-vertical-mode) for now.

#+begin_src emacs-lisp

  ;; (fido-vertical-mode)

  ;; Vertico

  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    ) 
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (setq enable-recursive-minibuffers t) ;;enables commands like M-x when in minibuffer

  ;; Orderless

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

#+end_src

** Modeline

#+begin_src emacs-lisp

  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :init (doom-modeline-mode 1)
  ;;   :custom (doom-modeline-height 15))

#+end_src

** Shortcut Cheat Sheet

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :config (setq which-key-idle-delay 0.1))

#+end_src

** Helpful

#+begin_src emacs-lisp

  ;; (use-package helpful
  ;;  :custom
  ;;  (counsel-describe-function-function #'helpful-callable)
  ;;  (counsel-describe-variable-function #'helpful-variable)
  ;;  :bind
  ;;  ([remap describe-function] . counsel-describe-function)
  ;;  ([remap describe-command] . helpful-command)
  ;;  ([remap describe-variable] . counsel-describe-variable)
  ;;  ([remap describe-key] . helpful-key))

#+end_src

** EVIL Mode
*** DONE org-cycle in evil mode

#+begin_src emacs-lisp

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-C-i-jump nil) ;; disables Jumplist binding so you can TAB in Normal mode in Org mode 
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-d-scroll t)
      (setq evil-want-keybinding nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

#+end_src

* Default Programs

#+begin_src emacs-lisp

  ;; DEFAULT BROWSER
  (setq browse-url-browser-function 'browse-url-generic       browse-url-generic-program "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")

#+end_src

* KEYBINDINGS

** Global

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (keymap-global-unset "C-k") ; unset kill line

#+end_src

** General.el Keybindings
*** Setup Keybindings with GENERAL https://github.com/noctuid/general.el

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer tmi/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix  "M-SPC") ;; access leader in insert mode

    (tmi/leader-keys
      ":" '(execute-extended-command :wk "M-x")

      "f" '(:ignore t :wk "Files")
      "f f" '(find-file :wk "Find file")
      "f c" '((lambda () (interactive)
                (find-file "~/.config/emacs/config.org")) 
              :wk "Open config.org")
      "f r" '(recentf-open :wk "Recent Files")

      "TAB TAB" '(comment-line :wk "Comment lines")

      "B" '(:ignore t :wk "bookmarks")
      "B b" '(list-bookmarks :wk "List bookmarks")
      "B s" '(bookmark-set :wk "Set bookmarks")
      "B S" '(bookmark-save :wk "Save bookmarks")

      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "switch buffer")
      "b i" '(ibuffer :wk "ibuffer")
      "b p" '(previous-buffer :wk "<- buffer")
      "b n" '(next-buffer :wk "buffer ->")
      "b k" '(kill-buffer :wk "kill buffer")

      
      "u" '(universal-argument :wk "u-arg")
      "q" '(exit-minibuffer :wk "Exit minib")

      "h" '(:ignore t :wk "help")
      "h r r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config")

      "d" '(:ignore t :wk "dir")
      "d d" '(switch-to-buffer :wk "placeholder")

      "w" '(:ignore t :wk "window")
      "w s"'(other-window :wk "switch window")
      "w c"'(quit-window :wk "close window")
      "w q" '(delete-other-windows :wk "delete other window")

      "e" '(:ignore t :wk "eval")
      "e r" '(eval-region :wk "eval-r")
      "e b" '(eval-buffer :wk "eval-b")

      "o" '(:ignore t :wk "org")
      "o a" '(org-agenda :wk "Agenda")
      "o c" '(org-capture :wk "Capture")
      "o l" '(org-store-link :wk "Store Link")
      "o i" '(org-insert-link :wk "Insert Link")
      "o s" '(org-schedule :wk "Schedule")
      ;; "o k" '(my/org-todo-insert-comment :wk "Comment TODO item")
      "o n" '(org-add-note :wk "add note to current entry")
      "o o" '(org-open-at-point :wk "open link")

      )
    )


#+end_src


* Org Mode

dont forget that you can manually add files to the agenda ‘M-x org-agenda-file-to-front’

#+begin_src emacs-lisp

  (defun tmi/org-mode-setup ()
    (org-indent-mode)
    (setq evil-auto-indent nil))

  ;;(defun my/org-todo-insert-comment ()
  ;;       (interactive)
  ;;       (let ((current-prefix-arg '(4))) ;; emulate C-u
  ;;         (call-interactively 'org-todo))) ;; invoke align-regexp interactively

  ;; when calling store-link it creates a link unless there is a defined custom id.
  ;; when capture is called do not create an id.
  ;; when my/capture-with... is called it creates an id at point.
  ;; so we can say capture with id > task and it will create an id at point and link to that id.

  (defun my/capture-with-id-at-point()
    (interactive)
    (let ((org-id-link-to-org-use-id t))
      (org-capture nil "J")
      ))

  (defun my/capture-journal-without-id()
    (org-capture nil "j"))

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . tmi/org-mode-setup)
    :config
    (setq org-directory-files '("~/mnt/d/notebooks/DemacsNotes/org")) ;;Default location of Org files
    (setq org-agenda-files '("/mnt/d/notebooks/DemacsNotes/org/Capture.org")) ;;org agenda searches in this file or dir for todo items
    (setq org-ellipsis " +")
    (setq org-return-follows-link t)
    (setq org-log-done 'time) ;; timestamp on done
    (setq org-log-into-drawer t)

    ;; Setup org-id

    (require 'org-id)
    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
    ;; (org-id-method) 
    (setq org-id-locations-file "/mnt/d/notebooks/DemacsNotes/org/data/.org-id-locations") ;; set where id's are stored

    ;; Org Capture Templates

    (setq org-capture-templates
          `(("t" "Tasks" entry (file+headline "/mnt/d/notebooks/DemacsNotes/org/Capture.org" "Inbox")
             (file "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org")
             :jump-to-captured t
             :empty-lines-after 1
             :empty-lines-before 1)
            ("m" "Meeting" entry (file+headline "/mnt/d/notebooks/DemacsNotes/org/Capture.org" "Inbox")
             (file "/mnt/d/notebooks/DemacsNotes/org/templates/Meeting_Template.org")
             :jump-to-captured t
             :empty-lines-after 1
             :empty-lines-before 1)
            ("c" "Comment" entry (file+headline "/mnt/d/notebooks/DemacsNotes/org/Capture.org" "Inbox")
             (file "/mnt/d/notebooks/DemacsNotes/org/templates/Comment_Template.org")
             :refile-targets ((nil :level . 2))
             :empty-lines-before 0
             :empty-lines-after 0
             :time-prompt t
             )
            ("j" "Journal" entry (file+olp+datetree "/mnt/d/notebooks/DemacsNotes/org/Capture.org" "Journal")
             (file "/mnt/d/notebooks/DemacsNotes/org/templates/Journal_Template.org")
             :empty-lines-before 0
             :empty-lines-after 0
             )
            )

          ;; Org global TODO States
          ;; (setq org-todo-keywords
          ;;	'((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
          ))

  ;;(setq org-refile-targets
  ;;         '(("/mnt/d/notebooks/DemacsNotes/org/Capture.org" :maxlevel . 1)))

  ;;(org-id-get-with-outline-path-completion)
  ;; (defun my/org-add-ids-to-headlines-in-file ()
  ;;   "Add ID properties to all headlines in the current file which
  ;; do not already have one."
  ;;   (interactive)
  ;;   (org-map-entries 'org-id-get-create))

  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'before-save-hook 'my/org-add-ids-to-headlines-in-file nil 'local)))

  ;; (add-hook 'org-mode-hook 'org-indent-mode)



#+end_src

* Littering

#+begin_src emacs-lisp

  (setq backup-directory-alist '(("." . "~/.config/emacs/tmp/backups/")))

#+end_src

* Bookmarks 

#+begin_src emacs-lisp

  (setq bookmark-default-file "/mnt/d/notebooks/DemacsNotes/org/bookmarks/bookmarks")

#+end_src

* MAGIT 

#+begin_src emacs-lisp

  (use-package magit
    :ensure t)

#+end_src

* Dired

#+begin_src emacs-lisp

  (use-package dired

    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.config/emacs/tmp/trash/")

#+end_src


* AUTOTANGLE 

#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
			(expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src


* Org Super agenda
