#+TITLE: Thomas GNU Emacs Config
#+AUTHOR: Thomas Michaelsen (TMI)
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+DESCRIPTION: Personal Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc:2
  
* INFO 

The code blocks of this file get tangled into the file
under the Header argument PROPERTY. To show the changes in the init file
you need to run revert-buffer or enable ~auto-revert-mode~ for that buffer.

* General Settings

#+begin_src emacs-lisp

                                          ; (server-start) 
  (setq inhibit-startup-message t)

  ;; WINDOW
  (scroll-bar-mode -1) ;show scroll bars
  (set-fringe-mode 0) ;added window border
  (menu-bar-mode -1) ; top menu bar
  (tool-bar-mode -1)
  ;; (tooltip mode -1)

  (setq visible-bell t)

  ;; Scroll
  ;; (pixel-scroll-precision-mode)

  ;; Line Numbers
  (global-display-line-numbers-mode 1)
  (menu-bar--display-line-numbers-mode-relative)
  ;; (display-line-numbers-type 'relative)
  (global-hl-line-mode 1)

  ;; History

  (setq history-length 25)
  (savehist-mode 1)

  (setq recentf-max-saved-items 25)
  (recentf-mode 1)

  ;; Auto update buffers
  (global-auto-revert-mode)

  ;; Frame Parameters

  ;; (set-frame-parameter nil 'internal-border-width 20)
  (set-frame-parameter (selected-frame) 'alpha '(85 85))

  (add-to-list 'default-frame-alist '(internal-border-width . 20))
  (add-to-list 'default-frame-alist '(alpha-background  . 70))

  ;; (add-to-list 'default-frame-alist '(width  . 100))
  ;; (add-to-list 'default-frame-alist '(height . 40))


  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)

#+end_src


* Setting Location Variables

Locations between my PC and the LAPTOP PC Differ, consider if statement to change var depending on
the system you are using.

#+begin_src emacs-lisp 

  ; (setq default-directory (getenv "DRIVE_D"))
  (defvar my/DRIVE_D "d:/")
  (defvar my/DRIVE_C "c:/")
  (defvar my/WORK_KROENER_FODLER "d:/kroener")
  (defvar my/HOME_KROENER_FOLDER "d:/work/kroener")

  (defvar my/org-agenda-files (list (expand-file-name "notebooks/org/Tasks.org" my/DRIVE_D)
                       (expand-file-name "notebooks/org/Meetings.org" my/DRIVE_D)))

  (defvar my/org-dir-files  (list (expand-file-name "notebooks/org" my/DRIVE_D)))

  (defvar my/bookmarks (expand-file-name "notebooks/org/.data/win_bookmarks" my/DRIVE_D))
  ;; (setq my-org-capture-template-target "/mnt/d/notebooks/DemacsNotes/org/Capture.org")
  ;; (defvar my/backup-directory "d:/notebooks/org/.data/backups/")
  ;; (defvar my/org-templates "d:/notebooks/org/.templates")
  (defvar my/org-id-locations-file (expand-file-name "notebooks/org/.data/.win_org-id-locations" my/DRIVE_D))
  (defvar my/trash-directory "~/.config/emacs/tmp/trash")



#+end_src

* Appearance Settings (Fonts and Themes)

considering another Theme like doom-old

#+begin_src emacs-lisp 

   ;; Font Settings
   (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-20"))
   (set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 160)

   ;; Theme Settings
   (setq modus-themes-region'(bg-only))
   (setq modus-themes-mode-line '(accented borderless padded))
   (setq modus-themes-org-blocks 'gray-background)
   (load-theme 'modus-vivendi t)


  ;; Icons
  (use-package all-the-icons
  :if (display-graphic-p))

#+end_src

* Package Manager

Package.el is built into Emacs. Works fine for now

#+begin_src emacs-lisp

  ;; TANGLE
  (require 'package)

  ;; Package Sources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Default Programs

Default Programs can be set up here. org-file-apps can point to windows programs but have
to be added to the $PATH Variable. Additionallt sending the informations about the
path to the document (per ex. a pdf) requires further tinkering.
The DEFAULT BROWSER Function however works flawlessly. 

#+begin_src emacs-lisp

     ;; DEFAULT BROWSER
     (setq browse-url-browser-function 'browse-url-generic       browse-url-generic-program "c:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe")

  (setq org-file-apps
     '(("\\.docx\\'" . default)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . default)
       (auto-mode . emacs)))

#+end_src

* Packages
It passes more than the Path I would have to pass the Windows path Otherwise
get the current direcory of the file
(browse-url-generic "D:/airwaymedix.pdf")
Since Emacs 20.1 use package is pre installed

* Show file Name

#+begin_src emacs-lisp

  (setq frame-title-format
        (list (format "%s %%S: %%j " (system-name))
              '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

  (defun my/clip-path-to-current-location ()
    "Show the full path file name in the minibuffer."
    (interactive)
    (kill-new (buffer-file-name)))

 ;; (global-set-key [C-f1] 'show-file-name) ; Or any other key you want


  #+end_src


** Minibuffer

For me ivy rich broke the buffer when starting dired.
- Maybe use Distrotubes guide for Ivy https://www.youtube.com/watch?v=A4UothfExBM&list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX&index=5
- check out Alternatives https://github.com/emacs-tw/awesome-emacs?tab=readme-ov-file#other-awesome-lists:~:text=for%20key%2Dbindings.-,Minibuffer,-IDO%20%2D%20%5Bbuilt  
Used the build in (fido-vertical-mode)  and switched to vertico and orderless

#+begin_src emacs-lisp

  ;; (fido-vertical-mode)

  ;; Vertico

  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    ) 
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  (setq enable-recursive-minibuffers t) ;;enables commands like M-x when in minibuffer

  ;; Orderless

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    ;; The :init section is always executed.
    :init
    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))

#+end_src

** Doom Modeline

#+begin_src emacs-lisp

  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :init (doom-modeline-mode 1)
  ;;   :custom (doom-modeline-height 15))

#+end_src

** Which-Key Shortcut Cheat Sheet

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :config (setq which-key-idle-delay 0.05))

#+end_src

** Helpful

#+begin_src emacs-lisp

  ;; (use-package helpful
  ;;  :custom
  ;;  (counsel-describe-function-function #'helpful-callable)
  ;;  (counsel-describe-variable-function #'helpful-variable)
  ;;  :bind
  ;;  ([remap describe-function] . counsel-describe-function)
  ;;  ([remap describe-command] . helpful-command)
  ;;  ([remap describe-variable] . counsel-describe-variable)
  ;;  ([remap describe-key] . helpful-key))

#+end_src

** EVIL Mode
*** DONE org-cycle in evil mode

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    ;;    (setq evil-want-C-i-jump nil) ;; disables Jumplist binding so you can TAB in Normal mode in Org mode 
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-d-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired org vertico ibuffer))
    (evil-collection-init))

#+end_src

** Org Mode
:PROPERTIES:
:ID:       21e5facd-bdbf-4e9e-af73-23ce5589535c
:END:

You can manually add files to the agenda ‘M-x org-agenda-file-to-front’

By Default ive set emacs to create IDs when I store a Link if there is no custom ID.
The my/capture functions set the variable to either use or not use an ID for this Capture.
~let~ will change that variable only within the function and leaves the global settings untouched.

#+begin_src emacs-lisp


  (defun tmi/org-mode-setup ()
    (org-indent-mode)
    (setq evil-auto-indent t))

     ;; Disable Line Number in Org mode
  (defun my-display-numbers-hook ()
       (display-line-numbers-mode 0))

     (add-hook 'org-mode-hook 'my-display-numbers-hook)

     (defun my/org-unschedule ()
       (interactive)
       (let ((current-prefix-arg '(4))) ;; emulate C-u
         (call-interactively 'org-schedule))) ;; invoke align-regexp interactivel

     (defun my/capture-without-id-at-point()
       (interactive)
       (let ((org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
         (org-capture nil)
         ))

     (defun my/journal-capture-without-id-at-point()
       (interactive)
       (let ((org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
         (org-capture nil "j")
         ))

     (defun my/journal-outline-capture-without-id-at-point()
       (interactive)
       (let ((org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))
         (org-capture nil "J")
         ))

     ;; (defun my/capture-journal-without-id()
     ;;   (org-capture nil))

     (use-package org
       :pin org
       :commands (org-capture org-agenda)
       :hook (org-mode . tmi/org-mode-setup)
       :config

       (setq org-directory my/org-dir-files) ;;Default location of Org files
       (setq org-agenda-files my/org-agenda-files) ;;org agenda searches in this file or dir for todo items
       (setq org-ellipsis " +")
       (setq org-return-follows-link t)
       (setq org-log-done 'time) ;; timestamp on done
       (setq org-log-into-drawer t)
       (setq org-startup-folded nil)

       ;; Setup org-id

       (require 'org-id)
       (setq org-id-link-to-org-use-id t)
       ;; (org-id-method) 
       (setq org-id-locations-file my/org-id-locations-file) ;; set where id's are stored

       ;;Set Faces

       (custom-set-faces
        '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
        '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
        '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
        '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
        '(org-level-5 ((t (:inherit outline-5 :height 0.9))))
        '(org-block ((t (:family "Fira Code Mono"  :height 1.0))))
        )

       ;; Org Capture Templates

       (setq org-capture-templates
             `(("t" "Tasks" entry (file+headline "d:/notebooks/org/Tasks.org" "Inbox")
                (file "d:/notebooks/org/.templates/Task_Template.org")
                :prepend t
                :jump-to-captured t
                :empty-lines-after 1
                :empty-lines-before 1
                )

               ("m" "Meeting" entry (file+headline "d:/notebooks/org/Meetings.org" "Meeting Notes")
                (file "d:/notebooks/org/.templates/Meeting_Template.org")
                :prepend t
                :jump-to-captured t
                :empty-lines-after 1
                :empty-lines-before 1
                :time-prompt 1
                )

               ("j" "Journal Log" plain (file+function "d:/notebooks/org/Journal.org"
                                                       (lambda ()
                                                         (org-datetree-find-date-create
                                                          (org-date-to-gregorian (org-today)) t)
                                                         (re-search-forward "^\\*.+ Log" nil t)))
                (file "d:/notebooks/org/.templates/Journal_Template.org")
                :prepend nil
                :jump-to-captured nil
                :empty-lines-before 1
                :empty-lines-after 1
                )

               ("J" "Journal Outline" entry (file+olp+datetree "d:/notebooks/org/Journal.org" "Journal")
                (file "d:/notebooks/org/.templates/Journal_Outline_Template.org")
                :prepend nil
                :jump-to-captured t
                :empty-lines-before 0
                :empty-lines-after 0
                )

               )

             ;; Org global TODO States
             ;; (setq org-todo-keywords
             ;;	'((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
             ))

     ;; Org Refile

     (setq org-refile-targets
           (quote(("d:/notebooks/org/Tasks.org" :maxlevel . 1)
                  ("d:/notebooks/org/Meetings.org" :maxlevel . 1)
                  ("d:/notebooks/org/org_capture.org" :maxlevel . 1))))


     (setq org-refile-use-outline-path nil)
     (setq org-refile-allow-creating-parent-nodes t)
     (setq org-outline-path-complete-in-steps nil)


     ;; Org Agenda

     (setq org-agenda-custom-commands
           '(

             ("," "Dayliy Overview"
              (

               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-start-day "-1d")
                        (org-agenda-span 1)
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp :scheduled))
                        (org-agenda-overriding-header "\n* Yesterday *\n")))

               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-span 1)
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp :scheduled))
                        (org-agenda-overriding-header "\n* Today *\n")))

               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-entry-types '(:deadline))
                        (org-deadline-warning-days 7)
                        (org-agenda-overriding-header "\n* Deadlines *\n")))

               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-start-day "+1d")
                        (org-agenda-span 3)
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp :scheduled))
                        (org-agenda-overriding-header "\n* Next *\n")))

               (todo "WAIT"
                     ((org-agenda-overriding-header "* Waiting on *\n")))

               (todo "ACT"
                     ((org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-overriding-header "\n* Open Tasks *\n")))

               (todo "DELIGATED"
                     ((org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-overriding-header "\n* Monitor *\n")))

               ))


             ("." "Weekly Overview"
              (


               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-span 7)
                        (org-agenda-start-on-weekday 0)
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp :scheduled))
                        (org-agenda-overriding-header "\n* Week *\n")))

               (agenda ""
                       ((org-agenda-block-separator nil)
                        (org-agenda-entry-types '(:deadline))
                        (org-deadline-warning-days 14)
                        (org-agenda-overriding-header "\n* deadlines *\n")))

               (todo "WAIT"
                     ((org-agenda-overriding-header "* Waiting on *\n")))

               (todo "ACT"
                     ((org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-overriding-header "\n* Open Tasks *\n")))

               (todo "DELIGATED"
                     ((org-agenda-block-separator nil)
                      (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                      (org-agenda-overriding-header "\n* Monitor *\n")))

               ))


             ))

     (defun my/org-agenda-inactive ()
       (interactive)
       (let ((org-agenda-include-inactive-timestamps t))
         (org-agenda)))

     (setq org-agenda-ignore-properties '(effort appt stats category))
     (setq org-agenda-todo-ignore-scheduled nil)
     (setq org-agenda-todo-list-sublevels t)
     (setq org-agenda-use-tag-inheritance nil)


     (setq org-todo-keyword-faces
           '(
             ("ACT" . (:foreground "#cd5c60" :weight bold))
             ("WAIT" . (:foreground "yellow"))
             ("READ" . (:foreground))

             ("DELIGATED" . (:foreground "lightblue"))
             ("DONE" . (:foreground))
             ("CANCELED" . (:foreground "blue" :weight bold))
             ))

#+end_src

*** Org Agenda

#+begin_src emacs-lisp

  (setq org-agenda-window-setup 'reorganize-frame) 
  (setq org-agenda-restore-windows-after-quit t)

#+end_src

*** Org Bullets

#+begin_src emacs-lisp

  (use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("#" "##" "###" "####" "#####" "######")))

#+end_src

** Google Calendar Import

#+begin_src emacs-lisp

  (require 'icalendar)

  (setq diary-file "d:/notebooks/org/cal.org")
  (setq calendar-mark-diary-entries-flag t)
  (add-to-list 'auto-mode-alist '("\\diary\\'" . diary-mode))
  (setq diary-comment-start ";;")
  (setq diary-comment-end "")
  (setq org-agenda-include-diary t)
  (add-hook 'diary-mode-hook 'real-auto-save-mode)
  (add-hook 'diary-mode-hook #'abbrev-mode) 

#+end_src


** MAGIT MERMAID

#+begin_src emacs-lisp

  (use-package magit
    :ensure t)

  (use-package ob-mermaid
    :ensure t)
  ;; (setq ob-mermaid-cli-path "~/mermaid/node_modules/.bin/mmdc")


#+end_src

** Dired

basic setup and trash directory

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
  (setq delete-by-moving-to-trash t)
  (setq trash-directory my/trash-directory)

#+end_src

* KEYBINDINGS

** Global

#+begin_src emacs-lisp

  ;; (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (keymap-global-unset "C-k") ; unset kill line

#+end_src

** General.el Keybindings for Leader Keys
Resources https://github.com/noctuid/general.el

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; set up 'SPC' as the global leader key
    (general-create-definer tmi/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix  "M-SPC") ;; access leader in insert mode

    (tmi/leader-keys
      ":" '(execute-extended-command :wk "M-x")

      "f" '(:ignore t :wk "Files")
      "f f" '(find-file :wk "Find file")
      "f c" '((lambda () (interactive)
                (find-file "~/.config/emacs/config.org")) 
              :wk "Open config.org")
      "f m" '((lambda () (interactive)
                (find-file "d:/notebooks/org/Meetings.org")) 
              :wk "Open Meetings.org")
      "f j" '((lambda () (interactive)
                (find-file "d:/notebooks/org/Journal.org")) 
              :wk "Open Journal.org")
      "f t" '((lambda () (interactive)
                (find-file "d:/notebooks/org/Tasks.org")) 
              :wk "Open Tasks.org")  
      "f r" '(recentf-open :wk "Recent Files")

      "TAB TAB" '(comment-line :wk "Comment lines")

      "B" '(:ignore t :wk "bookmarks")
      "B b" '(list-bookmarks :wk "List bookmarks")
      "B s" '(bookmark-set :wk "Set bookmarks")
      "B S" '(bookmark-save :wk "Save bookmarks")

      "b" '(:ignore t :wk "buffer")
      "b b" '(switch-to-buffer :wk "switch buffer")
      "b i" '(ibuffer :wk "ibuffer")
      "b p" '(previous-buffer :wk "<- buffer")
      "b n" '(next-buffer :wk "buffer ->")
      "b k" '(kill-buffer :wk "kill buffer")


      "u" '(universal-argument :wk "u-arg")
      "q" '(exit-minibuffer :wk "Exit minib")

      "h" '(:ignore t :wk "help")
      "h r r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config")

      "d" '(:ignore t :wk "Dired")
      "d d" '(dired :wk "Dired")
      "d D" '(dired-other-window :wk "Dired other Window")

      "w" '(:ignore t :wk "window")
      "w w"'(other-window :wk "switch window")
      "w q"'(quit-window :wk "close window")
      "w o" '(delete-other-windows :wk "delete other window")
      "w v" '(split-window-right :wk "split vertical")

      "e" '(:ignore t :wk "eval")
      "e r" '(eval-region :wk "eval-r")
      "e b" '(eval-buffer :wk "eval-b")

      "o" '(:ignore t :wk "org")
      "o a" '(org-agenda :wk "Agenda")
      "o A" '(my/org-agenda-inactive :wk "Agenda TS")
      "o c" '(org-capture :wk "Capture")
      "o C" '(my/capture-without-id-at-point :wk "Capture without ID")
      "o d" '(org-deadline :wk "Deadline")
      "o i" '(org-insert-last-stored-link :wk "Insert Link")
      "o I" '(org-insert-link :wk "Insert selected Link")
      "o j" '(my/journal-capture-without-id-at-point :wk "Journal Entry")
      "o J" '(my/journal-outline-capture-without-id-at-point :wk "Journal Outline")
      "o l" '(org-store-link :wk "Store Link")
      "o n" '(org-add-note :wk "add note to current entry")
      "o o" '(org-open-at-point :wk "open link")
      "o s" '(org-schedule :wk "Schedule")
      "o t" '(org-set-tags-command :wk "Tags set/edit")
      "o u" '(my/org-unschedule :wk "Unschedule")

      ;; "o k" '(my/org-todo-insert-comment :wk "Comment TODO item")
      "o ," '(org-cycle-agenda-files :wk "cycle agenda files")

      )
    )


#+end_src

* Window Behaviour and Buffers


#+begin_src emacs-lisp

  ;; (setq display-buffer-base-action
  ;; '((display-buffer-reuse-window
  ;;    display-buffer-reuse-mode-window
  ;;    display-buffer-same-window
  ;;    display-buffer-in-previous-window)))

#+end_src


* Littering

#+begin_src emacs-lisp

  (setq backup-directory-alist
        '((".*" . "~/.config/emacs/tmp/backups/")))
  (setq auto-save-file-name-transforms
        `((".*" ,"~/.config/emacs/tmp/backups/" t)))

#+end_src

* Bookmarks

#+begin_src emacs-lisp

 (setq bookmark-default-file my/bookmarks)

#+end_src

* AUTOTANGLE

Tangles this config to the init file

#+begin_src emacs-lisp

  (defun my/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))
      )
    ) 

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))

#+end_src

* Pushes to Dropbox

#+begin_src emacs-lisp

  (defun my/push-to-drop ()
    (interactive)

    (when (string-equal (buffer-file-name) "d:/notebooks/org/Tasks.org")
      ;; Dynamic scoping to the rescue
      (write-region nil nil "d:/Dropbox/Dropbox/org/Tasks_wr.org" nil nil nil nil))

    (when (string-equal (buffer-file-name) "d:/notebooks/org/Journal.org")
      ;; Dynamic scoping to the rescue
      (write-region nil nil "d:/Dropbox/Dropbox/org/Journal_wr.org" nil nil nil nil)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/push-to-drop)))

#+end_src

* Org Super agenda

