;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by â€˜savehistâ€™.

(setq savehist-minibuffer-history-variables '(magit-revision-history bookmark-history grep-find-history org-agenda-search-history org-refile-history grep-history xref--read-identifier-history regexp-search-ring org-capture--clipboards org-tags-history org-capture--prompt-history org-link--history dired-shell-command-history org-read-date-history eglot-command-history woman-topic-history evil-ex-history minibuffer-history extended-command-history yes-or-no-p-history read-number-history read-char-history buffer-name-history ivy-history search-ring counsel-describe-symbol-history file-name-history command-history counsel-M-x-history))
(setq magit-revision-history '("b50a1fb" "c8cd68b" "b50a1fb" "6c1bc05" "master" "b526c3b58ff6062c3e48146e7c2fc8f6690d7e63" "b526c3b" "b50a1fb" "286ef67" "f1c2131" "master" "b50a1fb" "HEAD" "master" "b50a1fb" "6568ae3" "903c38d" "3842772" "3842772ce3eaec5318c763d7348aa30bb3ef3e30" "3842772" "master" "b50a1fb" "master" "62cf562" "6568ae3"))
(setq bookmark-history '("Capture" "Capture" "Org Mode Setup" "Capture" "Org Mode Setup" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Capture" "Org Mode Setup" "Org-mode-setup.org" "org-capture-last-stored" "org-capture-last-stored" "Capture" "Capture.org" "Test" "Test" "Littering" "config.org" "Bookmarks" "Bookmarks" "Bookmarks" "config.org" "config.org" "Littering" "config.org" "config.org" "config.org" "org-capture-last-stored"))
(setq grep-find-history '("find . -type f -exec grep --color=auto -nH --null -e  \\{\\} +"))
(setq org-agenda-search-history '("Org"))
(setq org-refile-history '("a new task To do" "Setup Bookmarks" "asd" "qwer t" "asd" "Setup Bookmarks"))
(setq grep-history '("org" "grep --color=auto -nH --null -e "))
(setq regexp-search-ring '(#("???" 0 3 (isearch-case-fold-search t)) #("magit" 0 5 (isearch-case-fold-search t)) #("draw" 0 4 (isearch-case-fold-search t)) #("capt" 0 4 (isearch-case-fold-search t)) #("auto" 0 4 (isearch-case-fold-search t)) #("org-mode-" 0 9 (isearch-case-fold-search t)) #("evil-aut" 0 8 (isearch-case-fold-search t)) #("return" 0 6 (isearch-case-fold-search t)) #("set" 0 3 (isearch-case-fold-search t)) #(".." 0 2 (isearch-case-fold-search t)) #("bookm" 0 5 (isearch-case-fold-search t)) #("org" 0 3 (isearch-case-fold-search t)) #("dired" 0 5 (isearch-case-fold-search t)) #("boo" 0 3 (isearch-case-fold-search t)) #("////" 0 4 (isearch-case-fold-search t)) #("s" 0 1 (isearch-case-fold-search t))))
(setq org-tags-history '("123" "emacs" "123" "emacs" "test" "emacs" "em" "emacs" "ema" "emacs" "em" "emacs" "em" "emacs" "newTag" "oldTag" "newTag"))
(setq org-capture--prompt-history '("Captured with creating ID at point" "Captured without ID"))
(setq org-read-date-history '("10:00    " "   " "12:10    " "12:00    " "   " "12:00    " " 12:00    " "   " "sat      " "   "))
(setq eglot-command-history '("rust-analyzer" "Rust"))
(setq evil-ex-history '("w" "wq" "w" "wq" "w" "wq" "w" "wq" "w" "q" "w" "W" "w" "wq" "w" "wq" "w" "W" "w" "wq" "w" "q" "wq" "Wq" "w"))
(setq minibuffer-history '("org-capture" "1234" "org-store-link" "call-interactively" "org-indent-mode" "org-capture" "evil-auto-indent" "org-id-link-to-org-use-id" "org-id-get-create" "org-capture" "org-id-link-to-org-use-id" "org-file-apps" "org-attach-method" "org-stored-links" "org-store-link" "org-add-note" "org-todo" "123" "id:qwe" "org-refile-targets" "org-todo" "org-log-done" "org-log-note-how" "org-log-into-drawer" "Capture.org"))
(setq extended-command-history '("magit-revert-and-commit" "magit-init" "magit-refresh-buffer" "magit-refresh" "magit-status" "project-find-dir" "list-packages" "magit-status" "package-refresh-contents" "my/capture-with-id-at-point" "org-capture" "my/capture-with-id-at-point" "org-capture" "my/capture-with-id-at-point" "my/test" "my/capture-without-id-at-point" "org-capture" "my/capture-without-id-at-point" "org-capture" "my/capture-without-id-at-point" "org-capture" "my/capture-without-id-at-point" "org-capture" "my/capture-without-id-at-point" "org-capture"))
(setq yes-or-no-p-history '("yes" "no" "yes"))
(setq buffer-name-history '("file0" "file-0" "config.org" "Capture.org" "*Messages*" "config.org" "Org-mode-setup.org" "config.org" "Capture.org" "Meeting_Template.org" "Task_Template.org" "Meeting_Template.org" "Capture.org" "Meeting_Template.org" "config.org" "Meeting_Template.org" "config.org" "Meeting_Template.org" "Task_Template.org" "*Messages*" "*org-goto*" "trash" "tmp" "emacs" "config.org"))
(setq ivy-history '(#("org-element-paragraph-separate" 0 30 (ivy-index 0))))
(setq search-ring '(#("project" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("dired" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("org-id" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("link" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("org link" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("org-link" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("journal" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("s" 0 1 (isearch-case-fold-search t isearch-regexp-function nil)) #("C" 0 1 (isearch-case-fold-search nil isearch-regexp-function nil)) #("O" 0 1 (isearch-case-fold-search nil isearch-regexp-function nil)) #("I" 0 1 (isearch-case-fold-search nil isearch-regexp-function nil)) #("projectile" 0 10 (isearch-case-fold-search t isearch-regexp-function nil)) #("org" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("org" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("set" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("setS" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil))))
(setq counsel-describe-symbol-history '(#("^histo" 0 6 (ivy-index 0)) "history-length"))
(setq file-name-history '("~/.config/magit/.git/COMMIT_EDITMSG" "~/.config/magit/file0" "~/.config/magit/.git/COMMIT_EDITMSG" "~/.config/magit/file0" "~/.config/magit/" "~/.config/emacs/.git/COMMIT_EDITMSG" "~/.config/emacs/file-0" "~/.config/emacs/" "~/.config/emacs/init.el" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Meeting_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Meeting_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org" "/mnt/d/notebooks/DemacsNotes/org/Capture.org" "/mnt/d/notebooks/DemacsNotes/org/Org-mode-setup.org" "~/.config/" "~/.config/emacs/config.org::Lit" "~/.config/emacs/" "~/.config/emacs/newfile.org" "~/.config/emacs/" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Examples.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template.org" "/mnt/d/notebooks/DemacsNotes/org/templates/Task_Template"))
(setq command-history '((magit-reset-quickly "b50a1fb" nil) (magit-revert-no-commit "c8cd68b" '("--edit")) (magit-revert-no-commit "b50a1fb" '("--edit")) (evil-delete 256 256) (evil-delete 1 1 'line) (evil-delete 1 1 'line) (evil-delete 1 1 'line) (evil-delete 1 39 'line) (evil-delete 1 37 'line) (evil-delete 1 9 'line) (evil-delete 1 37 'line) (evil-delete 1 9 'line) (evil-delete 1 26 'line) (evil-delete 1 2 'line) (evil-delete 1 2 'line) (evil-delete 1 2 'line) (evil-delete 1 2 'line) (evil-delete 1 2 'line) (evil-delete 1 39 'line) (evil-delete 1 23 'line) (evil-delete 1 14 'line) (evil-delete 1 9 'line) (evil-delete 1 42 'line) (evil-delete 1 9 'line) (evil-delete 1 19 'line)))
(setq counsel-M-x-history '(#("^eval buf" 0 9 (ivy-index 0)) "eval-buffer" #("ido bu" 0 6 (ivy-index 4)) "ido-display-buffer" #("^eval" 0 5 (ivy-index 4)) "eval-last-sexp" #("^icom" 0 5 (ivy-index 1)) "icomplete-mode" #("pa lis" 0 6 (ivy-index 1)) "package-show-package-list" #("^desc va" 0 8 (ivy-index 0)) "describe-variable" #("pre his" 0 7 (ivy-index 4)) "previous-history-element" #("^pre hi" 0 7 (ivy-index 3)) "previous-history-element" #("^next his" 0 9 (ivy-index 1)) "next-history-element" "eval-last-sexp" #("^dired" 0 6 (ivy-index 51)) "dired" #("^save h" 0 7 (ivy-index 1)) "savehist-mode" #("^save " 0 6 (ivy-index 6)) "savehist-mode" #("buffer" 0 6 (ivy-index 1))))
(setq evil-jumps-history '((1 "/home/thms/.config/emacs/config.org") (12613 #1="/home/thms/.config/emacs/config.org") (1 #1#) (209 "/home/thms/.config/emacs/config.org") (3181 #3="/mnt/d/notebooks/DemacsNotes/org/Capture.org") (8818 #2="/home/thms/.config/emacs/config.org") (9458 #2#) (76 #3#) (9458 #2#) (3883 #3#) (11757 #2#) (3674 #3#) (11757 #2#) (3395 #3#) (3017 #3#) (29404 "/usr/local/share/emacs/29.1/lisp/org/org-capture.el.gz") (8965 #4="/home/thms/.config/emacs/config.org") (9228 #4#) (9224 #4#) (8962 #4#) (9224 #4#) (2999 #5="/mnt/d/notebooks/DemacsNotes/org/Capture.org") (9224 #4#) (82 "/usr/local/share/emacs/29.1/lisp/org/ol.el.gz") (2999 #5#)))
